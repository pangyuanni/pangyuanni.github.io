{"meta":{"title":"风晓博客","subtitle":"只有飘零的风，知道你所欲所求","description":"一个喜欢瞎玩的博主","author":"风晓","url":"http://www.windknows.com"},"pages":[{"title":"404 Not Found","date":"2020-01-23T08:04:56.888Z","updated":"2020-01-23T02:49:33.658Z","comments":true,"path":"404.html","permalink":"http://www.windknows.com/404.html","excerpt":"","text":"404 Not Found 很抱歉，您访问的页面不存在可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2020-01-27T05:00:25.774Z","updated":"2020-01-27T05:00:25.764Z","comments":true,"path":"about/index.html","permalink":"http://www.windknows.com/about/index.html","excerpt":"","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这是第一次搭建的博客，请随意留言，但是我不会回复 One More Thing懒加载占位图如果喜欢请拿去：图片链接 欢迎灌水"},{"title":"我的朋友们","date":"2020-01-27T05:03:26.134Z","updated":"2020-01-27T05:03:26.128Z","comments":true,"path":"friends/index.html","permalink":"http://www.windknows.com/friends/index.html","excerpt":"","text":"各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～ 名称： 风晓博客头像： http://i2.tiimg.com/708378/9da6ad9df503cebc.jpg网址： https://www.windknows.com标签： iOS"},{"title":"","date":"2020-01-23T08:04:56.892Z","updated":"2020-01-23T02:49:33.689Z","comments":true,"path":"projects/index.html","permalink":"http://www.windknows.com/projects/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2020-01-23T08:04:56.891Z","updated":"2020-01-23T02:49:33.686Z","comments":true,"path":"blog/categories/index.html","permalink":"http://www.windknows.com/blog/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-01-23T08:04:56.891Z","updated":"2020-01-23T02:49:33.687Z","comments":true,"path":"blog/tags/index.html","permalink":"http://www.windknows.com/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"使用hexo搭建博客（三）","slug":"hexo-2","date":"2020-02-03T05:40:59.000Z","updated":"2020-02-03T07:23:43.421Z","comments":true,"path":"hexo-2/","link":"","permalink":"http://www.windknows.com/hexo-2/","excerpt":"","text":"部署发行项目前言这篇文章是基于你已经注册了github账号和创建了对应的仓库，通过配置ssh来建立连接 创建Repository创建一个Repository，名称规则为 1username.github.name 然后编辑hexo的配置文件_config.yml,修改如图示地方。repo修改你的仓库地方 生成ssh123$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;Generating public/private rsa key pair.Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车&gt; 然后一路回车 .赋值id_rsa.pub文件内容，在github的settings中，点选SSH keys，添加一个key，将内容粘贴进去 测试是否添加成功1ssh -T git@github.com 部署到github上在hexo中分别进行生成，上传 12hexo ghexo d 部署成功后，可通过 http://pangyuanni.github.io 进行访问，其中将pangyuanni替换为你自己的username即可 此次分享到这儿 下篇博客分享如何部署到自己的与服务器上","categories":[{"name":"教程","slug":"教程","permalink":"http://www.windknows.com/blog/categories/教程/"}],"tags":[{"name":"hexo,blog","slug":"hexo-blog","permalink":"http://www.windknows.com/blog/tags/hexo-blog/"}]},{"title":"使用hexo搭建博客（二）","slug":"hexo-1","date":"2020-02-03T02:34:30.000Z","updated":"2020-02-03T07:27:36.811Z","comments":true,"path":"hexo-1/","link":"","permalink":"http://www.windknows.com/hexo-1/","excerpt":"","text":"前言 承接上篇博客，上篇博客中我们已经能够在本地成功运行我们的hexo博客，这篇文章我们来说说hexo的主题等个性化操作 主题 Hexo官网有很多很多主题供我们选择，我们可以在这些主题的基础之下进行修改，或者加入我们个性化的元素，hexo的官网网址是https://hexo.io/zh-cn/， 打开之后是这样，打开之后就是对hexo优点的介绍，然后我们选择主题然后打开就可以看到很多很多主题，由于hexo的服务器在国外加载可能较慢，耐心等待就好。 然后每个主题对应的名字就是主题的github地址，在我们hexo项目文件中找到theme进入之后，使用git clone 加主题的github地址，就可以把相应的主题文件克隆到我们的本地，我用我使用的material-x 这个主题为例，地址是https://github.com/xaoxuu/hexo-theme-material-x.git 1git clone https://github.com/xaoxuu/hexo-theme-material-x.git 这样就能将主题文件克隆到本地，如图示，当然也可以在浏览器里下载然后，解压到你的themes文件夹下 克隆完看看 看看使用说明，有没有相关的依赖包需要下载，若有按照说明进行下载，如 material-x npm i -S hexo-generator-search hexo-generator-json-content hexo-renderer-less Hexo网站配置文件123在根目录下的_config.yml主要是对网站的总属性进行设置如：网站标题，网站logo,网站插件使用等全局的属性主题目录下的_config.yml主要是针对网站的布局，导航等特性设置进行设 启用主题打开站点配置文件（根目录下的_config.yml）找到theme，将其值改为你下载的主题的名字，如下 PS :注意theme的冒号后面有个空格，不然会报错 然后再次启动我们的hexo，打开localshost:4000就可以看到主题效果 这样我们就更换了一个主题 关于网站的配置我们都可在网站的配置文件下更改： 刚更换完主题后，配置文件是这样的： 自己配置完是这样的 title是网站的标题 avatar 是网站的图标， logo是网站的logo， subtitle 是网站副标题 description 是网站描述 author 是作者 timezone 是时区 language 是语言 其他配置暂时可忽略 然后对于其他关于主题的设置可以到themes文件夹下里的主题文件里的_config.yml里面进行相关配置，比如评论系统，字数统计，背景图，等等相关配置都在里面进行配置，在配置文件里都有相关说明。 此次分享就到这儿，下篇博客我们分享如何部署项目","categories":[{"name":"教程","slug":"教程","permalink":"http://www.windknows.com/blog/categories/教程/"}],"tags":[{"name":"hexo，blog","slug":"hexo，blog","permalink":"http://www.windknows.com/blog/tags/hexo，blog/"}]},{"title":"hexo云服务器部署","slug":"hexo-3","date":"2020-01-30T04:18:25.000Z","updated":"2020-02-03T05:46:24.877Z","comments":true,"path":"hexo-3/","link":"","permalink":"http://www.windknows.com/hexo-3/","excerpt":"","text":"前言承接上篇博客，上篇博客中我们在Github上部署成功，但Github上的访问速度在国内较慢，而且免费提供的资源有限，不适于长时期的博客运作，所以在此篇文章中，来说一下，我部署在云服务器的过程以及遇到的问题 首先我们了解一下，hexo利用git更新的流程，部署在Github上和部署在云服务器上没有特别大的本质区别 整个流程就是本地将markdown文件渲染成静态文件，然后Git推送到服务器的r代码仓库，让服务器通过钩子（hook）同步网站根目录，再利用nginx托管这些静态资源，就可以实现访问 环境本地环境Windows10,在本地已经装好了Git，nodejs，hexo，并且在本地已经成功的能调试出来hexo 服务器环境华为的ECS（centos7） 已装好了git，nodejs，以及编译好了nginx（编译这玩意儿有些慢，我编译的时候大概花了将近30分钟） 本地机器配置配置密钥在终端使用git bash生成公匙，命令如下： 1ssh-keygen -t rsa 然后一路回车， 就会在如图示的文件路径下生成一个密钥文件id_rsa.pub 这个密钥文件我们后面会用到，这个密钥相当于我们访问服务器的钥匙 云服务器配置Git，nodejs，Nginx等安装具体安装过程可自行百度 创建git新用户以及进行配置创建git新用户1234adduser git #加入git用户passwd git #配置你的密码chmod 740 /etc/sudoers/ #修改git的sudo使用权限为只读vim /etc/sudoers #编辑sudoers 打开sudoers，找到以下内容 12## Allow root to run any commands anywhereroot ALL=(ALL) ALL 在他的下面加入以下内容 1git ALL=(ALL) ALL 然后wq保存，并且将权限修改回来 1chmod 400 /etc/sudoers 将公钥配置到服务器上就是刚才我们生成的那个文件将该文件内容复制，在云服务器端，切换至刚建好的git用户下，创建.ssh文件和和authorized_keys文件 123su gitmkdir ~/.sshvim ~/.ssh/authorized_keys 然后修改权限 123cd ~chmod 600 .ssh/authorzied_keys # 将文件设置为可读可写chmod 700 .ssh #将该文件夹设置为可读可写可执行（访问） 测试git链接切换到本地机器在本地机器上测试是否能连接到你的远程Git用户 1ssh -v git@SERVER_IP 测试成功会出现如下：如果测试不成功，看看具体的输出信息，通常是公钥没配置好的原因，不用担心，把原来生成的公钥删了，try again 就欧克了 创建网站根目录创建网站的根目录目的是为了让nginx进行托管hexo 生成的静态文件 创建一个目录用于作为网站的根目录，切换到root用 12su rootmkdir /home/hexo # 此目录为网站的根目录 然后变更该目录的所有者 1chown git:git -R /home/hexo 配置nginx安装过程自行度娘就好，编译好nginx后进入nginx的配置文件 1vim conf/nginx.conf 12345678910111213141516171819server&#123; listen 8081; #监听8081端口 server_name 139.159.245.212; #你的服务器名，通常是域名，如果是域名，你就需要监听80端口 root /home/hexo; #网站的根目录,根据自己所建自行修改 location / &#123; &#125; #access_log logs/access.log mylog; error_page 404 /404.html; #配置40x页面 location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; #配置50x页面 location = /50x.html &#123; &#125; &#125; 注意使用 nginx -t 命令检查配置文件的语法是否出错。然后使用 systemctl restart nginx.service 或者 在编译好的nginx目录下使用sbin/nginx -s reload命令重启服务即可 实现自动化部署建立git裸库（就是空的）在root用户下 123su rootcd /home/git # 在 git 用户目录下创建git init --bare blog.git 这时，git 用户的 ~ 目录下就存在一个 blog.git 文件夹，可使用 ls 命令查看。再修改blog.git 的所有者 使用钩子同步网站根目录在这使用的是 post-receive 这个钩子，当 git 有收发的时候就会调用这个钩子。 在 blog.git裸库的 hooks 文件夹中，新建 post-receive 文件。 1vim blog.git/hooks/post-receive 填入以下内容，其中 /home/hexo 为网站目录，根据自己的填入,保存退出。 12#!/bin/shgit --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f 该钩子的意思是当本地有提交到服务器时，会将文件放在/home/hexo下 -f这个参数如果在多人协作的博客中可能会引发不好的结果，因为他是强制更新的意思，会将本地版本覆盖掉远程服务器的版本，但是是个人的博客系统就无所谓了 保存后，要赋予这个文件可执行权限。 1chmod +x /home/git/blog.git/hooks/post-receive 本地机器中部署至服务器在本地中，和部署到 github 服务一样，需要先 hexo g 命令生成静态文件，通过 hexo s 命令能够正常进行本地访问，并且确保已经安装了 hexo-deployer-git。 配置Hexohexo 根目录下的 _config.yml 文件，找到 deploy。 1234deploy: type: git repo: git@SERVER:/home/git/blog.git # 填写你的服务器地址 将SERVER替换掉 branch: master # 分支 之后按照正常的流程部署，也可以在hexo项目中添加脚本scripts,脚本内容如下图所示（在package.json文件中添加） 测试自动化部署然后用hexo d 即可推送到远端服务器 然后可以用自己服务器ip访问自己的博客网站了 本次分享就到这儿，有任何问题欢迎留言，我会在第一时间，进行回复！！","categories":[{"name":"教程","slug":"教程","permalink":"http://www.windknows.com/blog/categories/教程/"}],"tags":[{"name":"hexo,blog","slug":"hexo-blog","permalink":"http://www.windknows.com/blog/tags/hexo-blog/"}]},{"title":"使用hexo 搭建博客(一)","slug":"hexo","date":"2020-01-30T04:09:29.000Z","updated":"2020-02-03T03:56:43.272Z","comments":true,"path":"hexo/","link":"","permalink":"http://www.windknows.com/hexo/","excerpt":"","text":"使用Hexo搭建博客（一）引言： 本来刚开始想用python的django框架进行个人博客的搭建，但是使用python框架进行搭建的话， 但是进行到一半就不想干了，因为代码量太复杂，太繁琐，后来在网上发现了hexo这个专业的博客框架，搭建起来比较django省时省力，就决定用Hexo来搭建，在本地搭建没什么问题，但部署在云服务器的过程异常艰难。但最终，在神器——百度 的帮助下，问题全部解决 Hexo 说明Hexo是基于nodeJS环境的静态博客，简单来说就是轻量，简易，高逼格的博客工具，hexo是将markdown文件生成静态的html然后将生成的html上传到我们的服务器，简而言之：hexo是个静态页面生成，上传的工具 准备环境先安利一个在windows下非常好用的命令行工具cmder,关于他的好用之处，在另一篇博客有详细说明 Node.js 下载后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 Add to PATH ,这样你就不用自己去配置电脑上环境变量了 Git 下载安装，下载后一路next就好 用npm安装Hexo 1npm install -g hexo-cli // npm是安装Nodejs一起安装的包管理工具 这样我们的hexo在本地就差不多完成了，然后我们新建一个空的文件夹，进去初始化博客（这里我新建一个blog的文件夹）然后输入下列命令 12hexo init # hexo会在目标文件夹简历网站所需要的所有文件npm install # 安装依赖包 也可以使用 hexo init ，其中 为保存Hexo的项目路径，然后就等待clone，就会把各种配置文件下载到你的文件夹中了， 本地启动12hexo g #等同于hexo generate,胜场静态文件到public文件夹hexo s # 等同于hexo server,在本地服务器运行 还有一个命令 1hexo clean #作为清除静态文件夹的内容并删掉，主要用于更改变更了某些地方导致页面显示不完善 之后就可以打开浏览器并输入ip地址http://localhost:4000/查看，效果如下 新建页面和文章12hexo new 'title' #生成新文章，路径在:\\source\\_post\\title.mdhexo new page 'title' #生成新页面,可在主题配置文件中配置页面 生成文章或页面的模板放在博客文件夹根目录下的 scaffolds/ 文件夹里面，文章对应的是 post.md ，页面对应的是page.md，草稿的是draft.md 编辑文章123456789---title: Start My Blog Trip — Power By Hexo # 文章页面上的显示名称，可以任意修改，不会出现在URL中date: 2017-2-10 23:49:28 # 文章生成时间，一般不改categories: diary # 文章分类目录，多个分类使用[a,b,c]这种格式tags: [Hexo,diary] # 文章标签---#这里开始使用markdown格式输入你的正文。&lt;!--more--&gt; #more标签以下的内容要点击“阅读全文”才能看见，#more标签以上的内容为你首页显示文章的摘要部分 Markdown文章编辑如果不熟悉MD语法，可以去百度，B站找教学，不难，常用的语法就那么几个 再给大家安利个md文章神器Typora,还有hexo文章神器HexoEditor 常用命令总结1234567hexo init [folder] # 初始化一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站hexo new [layout] &lt;title&gt; # 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来hexo version # 查看版本hexo clean # 清除缓存文件 (db.json) 和已生成的静态文件 (public)hexo g # 等于hexo generate # 生成静态文件hexo s # 等于hexo server # 本地预览hexo d # 等于hexo deploy # 部署，可与hexo g合并为 hexo d -g 本篇文章先到这儿，下篇文章给大家分享分享打造个性化的hexo-blog","categories":[{"name":"教程","slug":"教程","permalink":"http://www.windknows.com/blog/categories/教程/"}],"tags":[{"name":"hexo,blog","slug":"hexo-blog","permalink":"http://www.windknows.com/blog/tags/hexo-blog/"}]}]}