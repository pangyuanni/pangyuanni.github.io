<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风晓博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.windknows.com/"/>
  <updated>2020-01-30T03:46:28.712Z</updated>
  <id>http://www.windknows.com/</id>
  
  <author>
    <name>风晓</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://www.windknows.com/example/hexo-cloud/"/>
    <id>http://www.windknows.com/example/hexo-cloud/</id>
    <published>2020-01-30T03:46:15.175Z</published>
    <updated>2020-01-30T03:46:28.712Z</updated>
    
    <content type="html"><![CDATA[<p>title: hexo 云服务器部署<br>date: 2020-01-30 09:44:56<br>tags: hexo </p><h2 id="categories-教程"><a href="#categories-教程" class="headerlink" title="categories: 教程"></a>categories: 教程</h2><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>承接上篇博客，上篇博客中我们在Github上部署成功，但Github上的访问速度在国内较慢，而且免费提供的资源有限，不适于长时期的博客运作，所以在此篇文章中，来说一下，我部署在云服务器的过程以及遇到的问题</p><p>首先我们了解一下，hexo利用git更新的流程，部署在Github上和部署在云服务器上没有特别大的本质区别</p><p>整个流程就是本地将markdown文件渲染成静态文件，然后Git推送到服务器的r代码仓库，让服务器通过钩子（hook）同步网站根目录，再利用nginx托管这些静态资源，就可以实现访问</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><h2 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h2><p>Windows10,在本地已经装好了Git，nodejs，hexo，并且在本地已经成功的能调试出来hexo</p><h2 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h2><p>华为的ECS（centos7）</p><p>已装好了git，nodejs，以及编译好了nginx（编译这玩意儿有些慢，我编译的时候大概花了将近30分钟）</p><h1 id="本地机器配置"><a href="#本地机器配置" class="headerlink" title="本地机器配置"></a>本地机器配置</h1><h2 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h2><p>在终端使用git bash生成公匙，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>然后一路回车，</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200130111102078/20200130111145685.png" alt=""></p><p>就会在如图示的文件路径下生成一个密钥文件id_rsa.pub</p><p>这个密钥文件我们后面会用到，这个密钥相当于我们访问服务器的钥匙</p><h1 id="云服务器配置"><a href="#云服务器配置" class="headerlink" title="云服务器配置"></a>云服务器配置</h1><h2 id="Git，nodejs，Nginx等安装"><a href="#Git，nodejs，Nginx等安装" class="headerlink" title="Git，nodejs，Nginx等安装"></a>Git，nodejs，Nginx等安装</h2><p>具体安装过程可自行百度</p><h2 id="创建git新用户以及进行配置"><a href="#创建git新用户以及进行配置" class="headerlink" title="创建git新用户以及进行配置"></a>创建git新用户以及进行配置</h2><h3 id="创建git新用户"><a href="#创建git新用户" class="headerlink" title="创建git新用户"></a>创建git新用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adduser git #加入git用户</span><br><span class="line">passwd git #配置你的密码</span><br><span class="line">chmod 740 /etc/sudoers/ #修改git的sudo使用权限为只读</span><br><span class="line">vim /etc/sudoers #编辑sudoers</span><br></pre></td></tr></table></figure><p>打开sudoers，找到以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span># Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><p>在他的下面加入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ALL=(ALL)   ALL</span><br></pre></td></tr></table></figure><p>然后wq保存，并且将权限修改回来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure><h3 id="将公钥配置到服务器上"><a href="#将公钥配置到服务器上" class="headerlink" title="将公钥配置到服务器上"></a>将公钥配置到服务器上</h3><p>就是刚才我们生成的那个文件<br><img src="http://q4uie93wz.bkt.clouddn.com/20200130111102078/20200130111224785.png" alt=""><br>将该文件内容复制，在云服务器端，切换至刚建好的git用户下，创建<strong>.ssh</strong>文件和和<strong>authorized_keys</strong>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>然后修改权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">chmod 600 .ssh/authorzied_keys # 将文件设置为可读可写</span><br><span class="line">chmod 700 .ssh #将该文件夹设置为可读可写可执行（访问）</span><br></pre></td></tr></table></figure><h3 id="测试git链接"><a href="#测试git链接" class="headerlink" title="测试git链接"></a><strong>测试git链接</strong></h3><p>切换到本地机器在本地机器上测试是否能连接到你的远程Git用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@SERVER_IP</span><br></pre></td></tr></table></figure><p>测试成功会出现如下：<br><img src="http://q4uie93wz.bkt.clouddn.com/20200130111102078/20200130111952913.png" alt=""><br>如果测试不成功，看看具体的输出信息，通常是公钥没配置好的原因，不用担心，把原来生成的公钥删了，try again  就欧克了</p><h3 id="创建网站根目录"><a href="#创建网站根目录" class="headerlink" title="创建网站根目录"></a><strong>创建网站根目录</strong></h3><p>创建网站的根目录目的是为了让nginx进行托管hexo 生成的静态文件</p><p>创建一个目录用于作为网站的根目录，切换到root用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">mkdir /home/hexo    # 此目录为网站的根目录</span><br></pre></td></tr></table></figure><p>然后变更该目录的所有者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown git:git -R /home/hexo</span><br></pre></td></tr></table></figure><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a><strong>配置nginx</strong></h3><p>安装过程自行度娘就好，编译好nginx后进入nginx的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim conf/nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen       8081;           #监听8081端口</span><br><span class="line">        server_name 139.159.245.212; #你的服务器名，通常是域名，如果是域名，你就需要监听80端口</span><br><span class="line">        root       /home/hexo;       #网站的根目录,根据自己所建自行修改</span><br><span class="line">        location / &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">   #access_log logs/access.log mylog;</span><br><span class="line"></span><br><span class="line">   error_page 404 /404.html;         #配置40x页面</span><br><span class="line">       location = /40x.html &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   error_page 500 502 503 504 /50x.html; #配置50x页面</span><br><span class="line">       location = /50x.html &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>注意使用 <code>nginx -t</code> 命令检查配置文件的语法是否出错。然后使用 <code>systemctl restart nginx.service</code> 或者</p><p>在编译好的nginx目录下使用<code>sbin/nginx -s reload</code>命令重启服务即可</p><h2 id="实现自动化部署"><a href="#实现自动化部署" class="headerlink" title="实现自动化部署"></a>实现自动化部署</h2><h3 id="建立git裸库（就是空的）"><a href="#建立git裸库（就是空的）" class="headerlink" title="建立git裸库（就是空的）"></a><strong>建立git裸库（就是空的）</strong></h3><p>在root用户下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">cd /home/git   # 在 git 用户目录下创建</span><br><span class="line">git init --bare blog.git</span><br></pre></td></tr></table></figure><p>这时，<code>git</code> 用户的 <code>~</code> 目录下就存在一个 <code>blog.git</code> 文件夹，可使用 <code>ls</code> 命令查看。再修改<code>blog.git</code> 的所有者</p><h3 id="使用钩子同步网站根目录"><a href="#使用钩子同步网站根目录" class="headerlink" title="使用钩子同步网站根目录"></a><strong>使用钩子同步网站根目录</strong></h3><p>在这使用的是 <code>post-receive</code> 这个钩子，当 <code>git</code> 有收发的时候就会调用这个钩子。 在 <code>blog.git</code>裸库的 hooks 文件夹中，新建 <code>post-receive</code> 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>填入以下内容，其中 <code>/home/hexo</code> 为网站目录，根据自己的填入,保存退出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f</span><br></pre></td></tr></table></figure><p>该钩子的意思是当本地有提交到服务器时，会将文件放在/home/hexo下</p><p><code>-f</code>这个参数如果在多人协作的博客中可能会引发不好的结果，因为他是强制更新的意思，会将本地版本覆盖掉远程服务器的版本，但是是个人的博客系统就无所谓了</p><p>保存后，要赋予这个文件可执行权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /home/git/blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h2 id="本地机器中部署至服务器"><a href="#本地机器中部署至服务器" class="headerlink" title="本地机器中部署至服务器"></a>本地机器中部署至服务器</h2><p>在本地中，和部署到 <code>github</code> 服务一样，需要先 <code>hexo g</code> 命令生成静态文件，通过 <code>hexo s</code> 命令能够正常进行本地访问，并且确保<strong><em>已经安装</em></strong>了 <code>hexo-deployer-git</code>。</p><h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a><strong>配置Hexo</strong></h3><p>hexo 根目录下的 <code>_config.yml</code> 文件，找到 <code>deploy</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: git@SERVER:/home/git/blog.git     # 填写你的服务器地址 将SERVER替换掉</span><br><span class="line">    branch: master      # 分支</span><br></pre></td></tr></table></figure><p>之后按照正常的流程部署，也可以在hexo项目中添加脚本scripts,脚本内容如下图所示（在package.json文件中添加）</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200130111102078/20200130114431386.png" alt=""></p><h2 id="测试自动化部署"><a href="#测试自动化部署" class="headerlink" title="测试自动化部署"></a>测试自动化部署</h2><p><img src="http://q4uie93wz.bkt.clouddn.com/20200130111102078/20200130114351552.png" alt=""><br>然后用hexo d 即可推送到远端服务器 然后可以用自己服务器ip访问自己的博客网站了</p><p>本次分享就到这儿，有任何问题欢迎留言，我会在第一时间，进行回复！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: hexo 云服务器部署&lt;br&gt;date: 2020-01-30 09:44:56&lt;br&gt;tags: hexo &lt;/p&gt;
&lt;h2 id=&quot;categories-教程&quot;&gt;&lt;a href=&quot;#categories-教程&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.windknows.com/example/hexo-buliding/"/>
    <id>http://www.windknows.com/example/hexo-buliding/</id>
    <published>2020-01-29T03:01:28.949Z</published>
    <updated>2020-01-30T01:47:51.795Z</updated>
    
    <content type="html"><![CDATA[<p>title: 使用hexo搭建博客<br>date: 2020-01-29 10:09:24<br>tags: hexo</p><h2 id="categories-心得"><a href="#categories-心得" class="headerlink" title="categories: 心得"></a>categories: 心得</h2><h1 id="搭建Hexo博客中遇到的问题"><a href="#搭建Hexo博客中遇到的问题" class="headerlink" title="搭建Hexo博客中遇到的问题"></a>搭建Hexo博客中遇到的问题</h1><h3 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h3><p>   本来刚开始想用python的django框架进行个人博客的搭建，但是使用python框架进行搭建的话， 但是进行到一半就不想干了，因为代码量太复杂，太繁琐，后来在网上发现了hexo这个专业的博客框架，搭建起来比较django省时省力，就决定用Hexo来搭建，在本地搭建没什么问题，但部署在云服务器的过程异常艰难。但最终，在神器——百度 的帮助下，问题全部解决</p><h2 id="Hexo-说明"><a href="#Hexo-说明" class="headerlink" title="Hexo 说明"></a>Hexo 说明</h2><p>Hexo是基于nodeJS环境的静态博客，简单来说就是轻量，简易，高逼格的博客工具，hexo是将markdown文件生成静态的html然后将生成的html上传到我们的服务器，简而言之：hexo是个静态页面生成，上传的工具</p><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a><strong>准备环境</strong></h3><p>先安利一个在windows下非常好用的命令行工具<a href="https://cmder.net/" target="_blank" rel="noopener">cmder</a>,关于他的好用之处，在另一篇博客有详细说明</p><ol><li><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> 下载后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 <code>Add to PATH</code> ,这样你就不用自己去配置电脑上环境变量了</p></li><li><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> 下载安装，下载后一路next就好</p></li><li><p>用npm安装Hexo</p><p>npm install -g hexo-cli  // npm是安装Nodejs一起安装的包管理工具</p></li></ol><p>这样我们的hexo在本地就差不多完成了，然后我们新建一个空的文件夹，进去初始化博客（这里我新建一个blog的文件夹）然后输入下列命令</p><p>hexo init </p><p>也可以使用 hexo init  <folder>，其中 <folder>为保存Hexo的项目路径，然后就等待clone，就会把各种配置文件下载到你的文件夹中了，</folder></folder></p><p><img src="http://q4uie93wz.bkt.clouddn.com/django/20200129052843085.png" alt=""></p><p>然后执行 hexo s 基本的博客就能成功运行了</p><p><img src="http://q4uie93wz.bkt.clouddn.com/django/20200129052936282.png" alt=""></p><p><img src="http://q4uie93wz.bkt.clouddn.com/django/20200129053008515.png" alt=""></p><p>到这儿我们在本地的博客已经搭建完成了，然后在配置文件（项目根目录下的）</p><p>_config.yml中修改相关配置，就能对我们的博客进行修改</p><p>首先在github上新建一个仓库，注意名字要设成username.github.io </p><p>我们将我们的博客部署到github或者coding上的话修改</p><p><img src="http://q4uie93wz.bkt.clouddn.com/django/20200129053046211.png" alt=""></p><p>修改repo地址就行，然后用hexo clean（清除缓存），然后用hexo g（生成静态文件），hexo d （上传至github）</p><p>然后我们就可以用外网访问了，地址就是username.github.io这样我们就能访问了</p><p>例如我的博客</p><p><img src="http://q4uie93wz.bkt.clouddn.com/django/20200129053112712.png" alt=""></p><p>但是部署到github上的话有内存限制，是300mb 长期使用的话，还是建议部署到自己的云服务器上，我买的是华为的云服务器，系统是centos7</p><p>部署大概过程和gihub上类似，就是在云服务器上建一个远程仓库，然后将项目文件，上传到服务器的远程仓库，具体过程，下篇博客在进行分享</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: 使用hexo搭建博客&lt;br&gt;date: 2020-01-29 10:09:24&lt;br&gt;tags: hexo&lt;/p&gt;
&lt;h2 id=&quot;categories-心得&quot;&gt;&lt;a href=&quot;#categories-心得&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
  </entry>
  
</feed>
