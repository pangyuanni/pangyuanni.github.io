<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风晓博客</title>
  
  <subtitle>只有飘零的风，知道你所欲所求</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.windknows.com/"/>
  <updated>2020-02-07T04:21:32.149Z</updated>
  <id>http://www.windknows.com/</id>
  
  <author>
    <name>风晓</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在家学习java第二天</title>
    <link href="http://www.windknows.com/java-1/"/>
    <id>http://www.windknows.com/java-1/</id>
    <published>2020-02-07T01:25:25.000Z</published>
    <updated>2020-02-07T04:21:32.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在家无聊学习java第二天</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul><li>字符串常量</li><li>整数常量</li><li>浮点数常量</li><li>字符常量</li><li>布尔常量</li><li>空常量：null</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwodayDemo1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//字符串常量</span></span><br><span class="line">    System.out.println(<span class="string">"ABC"</span>);</span><br><span class="line">    System.out.println(<span class="string">""</span>);</span><br><span class="line">    System.out.println(<span class="string">"XYZ"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//整数常量</span></span><br><span class="line">    System.out.println(<span class="number">30</span>);</span><br><span class="line">    System.out.println(-<span class="number">30</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//浮点数常量（小数）</span></span><br><span class="line">    System.out.println(<span class="number">3.14</span>);</span><br><span class="line">    System.out.println(-<span class="number">2.5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//字符常量</span></span><br><span class="line">    System.out.println(<span class="string">'A'</span>);</span><br><span class="line">    System.out.println(<span class="string">'6'</span>);</span><br><span class="line">    <span class="comment">//System.out.println('');  两个单引号中间必须有且仅有一个字符，没有就会报错 </span></span><br><span class="line">    <span class="comment">//System.out.println('AB')    有两个字符也不行</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//布尔常量</span></span><br><span class="line">        System.out.println(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(<span class="keyword">false</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//空常量，不能直接用来打印输出</span></span><br><span class="line">        <span class="comment">// System.out.println(null);  会报错</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>java的数据类型分为两大类：</p><ul><li>基本数据类型</li><li>引用数据类型</li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>四类八种基本数据类型</p><table><thead><tr><th style="text-align:left">数据类型</th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td style="text-align:left">字节型</td><td>byte</td><td>1个字节</td><td>-128~127</td></tr><tr><td style="text-align:left">短整型</td><td>short</td><td>2个字节</td><td>-32768~32767</td></tr><tr><td style="text-align:left">整形</td><td>int（默认）</td><td>4个字节</td><td>-2^31^~2^31^-1</td></tr><tr><td style="text-align:left">长整型</td><td>long</td><td>8个字节</td><td>-2^63^~2^63^-1</td></tr><tr><td style="text-align:left">单精度浮点数</td><td>float</td><td>4个字节</td><td>1.4013E-45~3.4028E+38</td></tr><tr><td style="text-align:left">双精度浮点数</td><td>double（默认）</td><td>8个字节</td><td>4.9E-324~1.7977E+308</td></tr><tr><td style="text-align:left">字符型</td><td>char</td><td>2个字节</td><td>0-65535</td></tr><tr><td style="text-align:left">布尔类型</td><td>boolean</td><td>1个字节</td><td>true  false</td></tr></tbody></table><p>【<strong>SP</strong>】 </p><ul><li><p>java中的默认类型，整形是int，浮点型是double</p></li><li><p>字符串不是基本类型而是引用类型</p></li><li><p>浮点型可能只是一个近似值，并非精确的值</p></li><li><p>数据范围与字节数并不一定相关，如float数据范围比long更加广泛，单float是4字节而long是8字节</p></li><li><p>如果使用float需加后缀F，若使用long后缀需加L，推荐使用大写字母后缀</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(100);//是int型</span><br><span class="line">System.out.println(100L);//是long型</span><br><span class="line">System.out.println(100.2);//是double型</span><br><span class="line">System.out.println(100F);//是float型</span><br></pre></td></tr></table></figure></li></ul><h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><p>变量定义有以下两种方式</p><ol><li><p>创建一个变量并且使用的格式</p><ul><li><strong>数据类型 变量名称</strong> //创建一个变量</li><li><strong>变量名称 = 数据值</strong>  //赋值</li></ul></li><li><p>一步到位</p><ul><li><p><strong>数据类型  变量名称 = 数据值</strong>；//在创建变量同时，立刻放入指定的数据值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Day02</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式一</span></span><br><span class="line"><span class="keyword">int</span> num1;</span><br><span class="line">num1 =<span class="number">10</span>;</span><br><span class="line">System.out.println(num1);</span><br><span class="line">    <span class="comment">//方式二</span></span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">25</span>;</span><br><span class="line">    System.out.println(num2);</span><br><span class="line">    System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">    <span class="keyword">byte</span> num3 = <span class="number">30</span>; <span class="comment">//注意右侧数值不能超过左侧数据类型的数据范围</span></span><br><span class="line">    System.out.println(num3);</span><br><span class="line">    <span class="comment">//byte num4 = 400;// 右侧超出了byte的取值范围，错误！！</span></span><br><span class="line">    <span class="keyword">short</span> num5 = <span class="number">50</span>;</span><br><span class="line">    System.out.println(num5);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> num6 = <span class="number">3000000L</span>;</span><br><span class="line">    System.out.println(num6);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> num7 = <span class="number">2.5F</span>;</span><br><span class="line">    System.out.println(num7);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span>  num8 = <span class="number">1.2</span>;</span><br><span class="line">    System.out.println(num8);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> zifu1 = <span class="string">'A'</span>;</span><br><span class="line">    System.out.println(zifu1);</span><br><span class="line"></span><br><span class="line">    zifu1 = <span class="string">'中'</span>;</span><br><span class="line">    System.out.println(zifu1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> var1 = <span class="keyword">true</span>;</span><br><span class="line">    System.out.println(var1);</span><br><span class="line"></span><br><span class="line">    var1 = <span class="keyword">false</span>;</span><br><span class="line">    System.out.println(var1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><strong>TIPS</strong></p><ul><li>变量之间不能重复</li><li>对于float和long后缀不能丢掉</li><li>如果用type和long注意取值范围</li><li>没有进行赋值的变量，不能直接使用，一定要复制之后才能进行使用（如打印输出操作）</li><li>变量不要超出变量的定义域</li></ul><h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><ol><li><p>自动转换</p><p>一个int类型变量和一个byte类型变量进行加法运算，结果是什么类型？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>运算结果，变量的类型将是int类型，这就是出现了数据类型的自动类型转换现象</p><p><strong>自动转换(隐式)</strong>：将取值范围小的类型自动提升为取值范围大的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">byte</span> =<span class="number">2</span>;</span><br><span class="line">    <span class="comment">//byte x = b+i //报错</span></span><br><span class="line">    <span class="comment">//int 类型和byte；类型运算，结果是int</span></span><br><span class="line">    <span class="keyword">int</span> j = b+i;</span><br><span class="line">    System.out.println(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>规则：数据范围从小到大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> num1 = <span class="number">100</span>;<span class="comment">//左边是long，右边是int，从int--long是从小到大，自当发生数据类型转换</span></span><br><span class="line"><span class="keyword">double</span> num2 = <span class="number">2.5F</span>;</span><br><span class="line"><span class="keyword">float</span> num3  =<span class="number">30L</span>;</span><br></pre></td></tr></table></figure><p><strong>强制类型转换</strong></p><p>代码需要进行特殊的格式处理，不能自动完成</p><p>范围小的类型 范围小的变量名 = （范围小的类型）原本范围大的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = (<span class="keyword">int</span>) <span class="number">100L</span>;</span><br><span class="line"><span class="comment">//左边是int类型，右边是long类型，不一样</span></span><br><span class="line"><span class="comment">//long --&gt; int ，不是从小到大，不能发生自动化类型转换</span></span><br><span class="line"><span class="comment">//范围小的类型 范围小的变量名 = （范围小的类型）原本范围大的数据</span></span><br></pre></td></tr></table></figure><p><strong>Tips</strong></p><ol><li><p>强制类型转换一般不使用，因为有可能发生精度损失，数据溢出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num  =(<span class="keyword">int</span>) <span class="number">6000000000L</span>;</span><br><span class="line">输出num为<span class="number">17</span>亿数据溢出</span><br></pre></td></tr></table></figure></li><li><p>byte/short/char三种类型都可以发生数学运算</p></li><li><p>byte/short/char三种类型在运算的时候，都会被首先提升为int类型然后再计算</p></li><li><p>boolean  不能发生数据类型转换</p></li></ol></li></ol><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><ul><li>取反 ！</li><li>自增 ++</li><li>自减 –</li></ul><h2 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h2><ul><li>+</li><li>-</li><li>*</li><li>/</li><li>=</li></ul><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>数据类型 变量名称 = 条件判断 ？ 表达式A：表达式B;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">int</span> max = a &gt; b ? a : b;</span><br></pre></td></tr></table></figure><p><strong>Tips</strong></p><ul><li>必须同时保证表达式A和表达式B都符合左侧数据类型的要求</li><li>三元运算符的结果必须被使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> result = <span class="number">3</span> &gt; <span class="number">4</span> ? <span class="number">2.5</span> : <span class="number">10</span> ;  <span class="comment">//错误 数据类型不一致</span></span><br><span class="line">System.out.println(a &gt; b ? a : b);<span class="comment">//正确写法</span></span><br><span class="line">a &gt; b ? a : b  <span class="comment">//错误写法，没有进行使用</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在家无聊学习java第二天&lt;/p&gt;
&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="java" scheme="http://www.windknows.com/blog/categories/java/"/>
    
      <category term="教程" scheme="http://www.windknows.com/blog/categories/java/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="学习，java" scheme="http://www.windknows.com/blog/tags/%E5%AD%A6%E4%B9%A0%EF%BC%8Cjava/"/>
    
  </entry>
  
  <entry>
    <title>在家java学习第一天</title>
    <link href="http://www.windknows.com/java/"/>
    <id>http://www.windknows.com/java/</id>
    <published>2020-02-06T08:41:42.000Z</published>
    <updated>2020-02-07T04:21:55.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>​    下学期要学习java，闲来无事，开始了自学之旅，用于记录学习java的全过程，当是学习笔记吧</p><h1 id="什么是java，以及java发展史"><a href="#什么是java，以及java发展史" class="headerlink" title="什么是java，以及java发展史"></a><strong>什么是java，以及java发展史</strong></h1><h2 id="什么是java语言"><a href="#什么是java语言" class="headerlink" title="什么是java语言"></a><strong>什么是java语言</strong></h2><p>Java语言是美国Sun公司（Stanford University Network）斯坦福大学网络公司，在1995年推出的高级编程语言，所谓编程语言，是计算机的语言，人门可以使用编程语言对计算机下达命令，让计算机完成人门需要的功能</p><p>Java语言之父James Gosling就是这家公司非常nb的程序员，关于java之父的详细了解，可以看看以下这篇文章</p><p>​       <a href="http://www.elecfans.com/d/633774.html" target="_blank" rel="noopener">java之父及java诞生</a></p><p><img src="http://q4uie93wz.bkt.clouddn.com/java/20200206045310571.png" alt=""></p><p>​                                              java语言之父 James Gosling</p><h2 id="Java发展史"><a href="#Java发展史" class="headerlink" title="Java发展史"></a>Java发展史</h2><ul><li>1995年Sun公司发布java1.0版本</li><li>1997年发布java1.1版本</li><li>1998年发布java1.2版本</li><li>2000年发布java1.3版本</li><li>2002年发布java1.4版本</li><li>2004年发布java5版本（因为和1.4变化太大，更新力度太大，所以用大版版本号来表示）</li><li>2006年发布java6版本</li><li>2009年Oracle甲骨文公司收购Sun公司，并于2011年发布java7版本</li><li>2014年发布java8版本</li><li>2017年9月发布java9版本</li><li>2018年3月发布java10版本</li></ul><h2 id="Java的应用"><a href="#Java的应用" class="headerlink" title="Java的应用"></a>Java的应用</h2><p>Java语言经过多年的发展已经形成了一个较为健全的语言生态，在Web开发、大数据开发、Android开发等领域均有广泛的应用，而且凭借稳定的性能表现和较强的扩展性，目前Java语言依然是大型互联网平台较为常见的解决方案，采用Java语言进行大型后端系统的开发会在很大程度上降低开发风险。JAVA的一次编译，到处运行，你知道多少？](<a href="https://blog.csdn.net/wangyongxia921/article/details/28117155" target="_blank" rel="noopener">https://blog.csdn.net/wangyongxia921/article/details/28117155</a>)</p><h2 id="Java环境的搭建"><a href="#Java环境的搭建" class="headerlink" title="Java环境的搭建"></a>Java环境的搭建</h2><ul><li><strong>JVM</strong> (java Virtual Machine):java虚拟机，简称JVM，是运行所有java程序的假想计算机，是java程序的运行环境，是java最具吸引力的特性之一，我们编写的JVM之上</li><li><strong>跨平台</strong>：任何软件的运行，都必须要运行在操作系统之上，而我们用Java编写的软件可以运行在任何的操作系统上，这个特性称为java语言的跨平台特性，该特性是由JVM实现的，我们编写的程序运行在JVM上，而JVM运行在操作系统上（这就是著名的‘一次编写，到处运行’）可以看看这篇文章<a href="https://blog.csdn.net/wangyongxia921/article/details/28117155" target="_blank" rel="noopener">JAVA的一次编译，到处运行，你知道多少？</a></li></ul><p>​           <img src="http://q4uie93wz.bkt.clouddn.com/java/20200206052004691.png" alt=""></p><h3 id="JRE和JDK"><a href="#JRE和JDK" class="headerlink" title="JRE和JDK"></a><strong>JRE和JDK</strong></h3><ul><li><strong>JRE</strong> (java Runtime Environment) :是java程序的运行时环境，包含JVM和运行时所需要的核心类库</li><li><strong>JDK</strong> (java Development Kit):是java程序开发工具包，包含JRE和开发人员使用的工具</li></ul><p>我们想要运行一个已有的java程序，那么只需要安装JRE即可</p><p>我们想要开发一个全新的java程序，那么必须安装JDK</p><p>JDK，JRE，JVM关系图</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200206172646684/20200206052700258.png" alt=""></p><p>下载安装<a href="https://www.oracle.com/technetwork/java/javase/archive-139210.html" target="_blank" rel="noopener">JDK</a></p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200206172646684/20200206053424799.png" alt=""></p><p>可以选择不同的版本号,(我无论什么都喜欢下载最新的我下载的是最新的)</p><p>选择相应的java版本，点进去</p><p><img src="C:\Users\lyh\AppData\Roaming\Typora\typora-user-images\1580981715514.png" alt="1580981715514"></p><p>选择相应系统的jdk点击下载</p><p>下载成功之后点击安装</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200206172646684/20200206054114831.png" alt=""></p><p><strong>注意这个路径问题</strong></p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>将我们的jdk安装的bin目录添加到环境变量path里</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200206172646684/20200206054828671.png" alt=""></p><p>然后打开cmd测试</p><p><img src="C:\Users\lyh\AppData\Roaming\Typora\typora-user-images\1580982637728.png" alt="1580982637728"></p><p>这样就说明，jdk环境变量配好了</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>新建一个文本文档，命名为HelloWorld.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello,World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\lyh\AppData\Roaming\Typora\typora-user-images\1580983459688.png" alt="1580983459688"></p><p>执行javac 编译HelloWorld.java执行后什么都不出现，同目录下会出现.class的字节码文件</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200206172646684/20200206060318866.png" alt=""></p><p>然后java  HelloWorld 就能成功执行该文件</p><p><img src="C:\Users\lyh\AppData\Roaming\Typora\typora-user-images\1580984557635.png" alt="1580984557635"></p><p><strong>注意用的是java HelloWorld，java后面一个空格，加不加后缀的文件名</strong></p><p>今天就学了这么多，明天再学变量什么的，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;​    下学期要学习java，闲来无事，开始了自学之旅，用于记录学习java的全过程，当是学习笔记吧&lt;/
      
    
    </summary>
    
      <category term="java" scheme="http://www.windknows.com/blog/categories/java/"/>
    
      <category term="教程" scheme="http://www.windknows.com/blog/categories/java/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="学习，java" scheme="http://www.windknows.com/blog/tags/%E5%AD%A6%E4%B9%A0%EF%BC%8Cjava/"/>
    
  </entry>
  
  <entry>
    <title>文泉课堂爬虫源码</title>
    <link href="http://www.windknows.com/wenquanketang-spider/"/>
    <id>http://www.windknows.com/wenquanketang-spider/</id>
    <published>2020-02-05T02:21:59.000Z</published>
    <updated>2020-02-05T10:11:56.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天打开发现文泉课堂需要登陆才能进行访问，一登陆，发现，昨天的502，明显好多了今天附上所有源码，供大家学习和参考</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># Author:风晓</span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">from pathlib import Path</span><br><span class="line">import os</span><br><span class="line">import jwt</span><br><span class="line">import json</span><br><span class="line">from tqdm import trange</span><br><span class="line">data =&#123;&#125;</span><br><span class="line">headers =&#123;</span><br><span class="line">    &apos;user-agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&apos;,</span><br><span class="line">  &#125;</span><br><span class="line">JWT_SECRET = &apos;g0NnWdSE8qEjdMD8a1aq12qEYphwErKctvfd3IktWHWiOBpVsgkecur38aBRPn2w&apos;</span><br><span class="line"># SESS = httpx.Client()</span><br><span class="line">URL = &apos;https://lib-nuanxin.wqxuetang.com&apos;</span><br><span class="line"># SESS.get(URL)</span><br><span class="line">&apos;&apos;&apos; jwt key for bookid &apos;&apos;&apos;</span><br><span class="line"># url = &quot;https://lib-nuanxin.wqxuetang.com/v1/read/k?bid=%s&quot; % bookid</span><br><span class="line">def gen_jwt_key(bookid,cooike):</span><br><span class="line">  url = f&apos;&#123;URL&#125;/v1/read/k?bid=&#123;bookid&#125;&apos;</span><br><span class="line">  print(url)</span><br><span class="line">  # r = self.session.get(url, timeout=5)</span><br><span class="line"></span><br><span class="line">  # r = SESS.get(url, timeout=5)</span><br><span class="line">  # j = json.loads(r.text)</span><br><span class="line">  head = &#123;</span><br><span class="line">    &apos;Accept&apos;: &apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&apos;,</span><br><span class="line">    &apos;Accept-Encoding&apos;: &apos;gzip, deflate, sdch&apos;,</span><br><span class="line">    &apos;Accept-Language&apos;: &apos;zh-CN,zh;q=0.8&apos;,</span><br><span class="line">    &apos;Connection&apos;: &apos;keep-alive&apos;,</span><br><span class="line">    &apos;Cookie&apos;: cooike,</span><br><span class="line">    &apos;Host&apos;: &apos;lib-nuanxin.wqxuetang.com&apos;,</span><br><span class="line">    &apos;Upgrade-Insecure-Requests&apos;: &apos;1&apos;,</span><br><span class="line">    &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.112 Safari/537.36&apos;,</span><br><span class="line">  &#125;</span><br><span class="line">  try:</span><br><span class="line">    resp = requests.get(url,headers = head)</span><br><span class="line">    resp.raise_for_status()</span><br><span class="line">  except Exception as exc:</span><br><span class="line">    print(exc)</span><br><span class="line"></span><br><span class="line">  try:</span><br><span class="line">    jdata = resp.json()</span><br><span class="line">  except Exception as exc:</span><br><span class="line">    jdata = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  res = jdata.get(&apos;data&apos;)</span><br><span class="line">  if res is None:</span><br><span class="line">    raise Exception(&apos;returned None, something is not right...&apos;)</span><br><span class="line"></span><br><span class="line">  return res</span><br><span class="line">def gen_jwt_token(bookid, page,cooike):</span><br><span class="line">  &apos;&apos;&apos; gen jwt token &apos;&apos;&apos;</span><br><span class="line">  cur_time = time.time()</span><br><span class="line">  jwtkey = gen_jwt_key(bookid,cooike)</span><br><span class="line">  print(jwtkey)</span><br><span class="line">  jwttoken = jwt.encode(</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;p&quot;: page,</span><br><span class="line">      &quot;t&quot;: int(cur_time) * 1000,</span><br><span class="line">      &quot;b&quot;: str(bookid),</span><br><span class="line">      &quot;w&quot;: 1000,</span><br><span class="line">      &quot;k&quot;: json.dumps(jwtkey),</span><br><span class="line">      &quot;iat&quot;: int(cur_time),</span><br><span class="line">    &#125;,</span><br><span class="line">    JWT_SECRET,</span><br><span class="line">    algorithm=&apos;HS256&apos;,</span><br><span class="line">  ).decode(&apos;ascii&apos;)</span><br><span class="line">  print(jwttoken)</span><br><span class="line">  return jwttoken</span><br><span class="line">def bookinfo(bookid,cooike):</span><br><span class="line">  &apos;&apos;&apos; bookinfo &apos;&apos;&apos;</span><br><span class="line">  # url = f&quot;https://lib-nuanxin.wqxuetang.com/v1/read/initread?bid=&#123;self.bookid&#125;&quot;  # noqa</span><br><span class="line">  url = f&apos;&#123;URL&#125;/v1/read/initread?bid=&#123;bookid&#125;&apos;</span><br><span class="line">  # r = self.session.get(url)</span><br><span class="line">  head = &#123;</span><br><span class="line">    &apos;Accept&apos;: &apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&apos;,</span><br><span class="line">    &apos;Accept-Encoding&apos;: &apos;gzip, deflate, sdch&apos;,</span><br><span class="line">    &apos;Accept-Language&apos;: &apos;zh-CN,zh;q=0.8&apos;,</span><br><span class="line">    &apos;Connection&apos;: &apos;keep-alive&apos;,</span><br><span class="line">    &apos;Cookie&apos;: cooike,</span><br><span class="line">    &apos;Host&apos;: &apos;lib-nuanxin.wqxuetang.com&apos;,</span><br><span class="line">    &apos;Upgrade-Insecure-Requests&apos;: &apos;1&apos;,</span><br><span class="line">    &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.112 Safari/537.36&apos;,</span><br><span class="line">  &#125;</span><br><span class="line">  try:</span><br><span class="line">    bookid = int(bookid)</span><br><span class="line">  except Exception as exc:</span><br><span class="line">    print(exc)</span><br><span class="line">    raise</span><br><span class="line">  if bookid &lt; 1:</span><br><span class="line">    # logger.warning(f&apos; bookid &#123;bookid&#125; &lt; 1, setting bookid to 1&apos;)</span><br><span class="line">    # bookid = 1</span><br><span class="line">    raise Exception(&apos; bookid must be bigger than zero&apos;)</span><br><span class="line"></span><br><span class="line">  try:</span><br><span class="line">    print(url)</span><br><span class="line">    resp = requests.get(url,headers=head)</span><br><span class="line">    resp.raise_for_status()</span><br><span class="line">  except Exception as exc:</span><br><span class="line">    print(exc)</span><br><span class="line">  try:</span><br><span class="line">    jdata = resp.json()</span><br><span class="line">  except Exception as exc:</span><br><span class="line">    print(exc)</span><br><span class="line">    jdata = &#123;&#125;</span><br><span class="line">  data = jdata.get(&apos;data&apos;)</span><br><span class="line">  print(data)</span><br><span class="line">  if data is None:</span><br><span class="line">    raise Exception(</span><br><span class="line">      &apos;returned None, something is not right...可能无此书号，也有可能是网络有问题或IP被限制……&apos;  # noqa</span><br><span class="line">    )</span><br><span class="line">  bookinfo.jdata = jdata</span><br><span class="line">  # print(data.get(&apos;canreadpages&apos;))</span><br><span class="line">  print(data.get(&apos;name&apos;), data.get(&apos;canreadpages&apos;))</span><br><span class="line">  return data.get(&apos;name&apos;), data.get(&apos;canreadpages&apos;)</span><br><span class="line">def fetch_png(bookid, page=1):</span><br><span class="line">  &apos;&apos;&apos; download booid page img &apos;&apos;&apos;</span><br><span class="line">  token = gen_jwt_token(bookid, page,cooike)</span><br><span class="line">  print(token)</span><br><span class="line">  url = f&apos;&#123;URL&#125;/page/img/&#123;bookid&#125;/&#123;page&#125;?k=&#123;token&#125;&apos;</span><br><span class="line">  print(url)</span><br><span class="line">  headers = &#123;</span><br><span class="line">    &apos;accept&apos;: &apos;image / webp, image / *, * / *;q = 0.8&apos;,</span><br><span class="line">    &apos;referer&apos;: f&apos;&#123;URL&#125;/read/pdf/&#123;bookid&#125;&apos;,</span><br><span class="line">    &apos;user-agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&apos;,</span><br><span class="line">    # noqa</span><br><span class="line">  &#125;</span><br><span class="line">  req = requests.get(url,headers=headers)</span><br><span class="line">  res = req.content</span><br><span class="line">  if not os.path.exists(str(bookid)):</span><br><span class="line">    os.mkdir(str(bookid))</span><br><span class="line">  with open(str(bookid)+&apos;/&apos;+str(page+1000)+&apos;.jpg&apos;,&apos;wb&apos;)as f:</span><br><span class="line">      f.write(res)</span><br><span class="line"></span><br><span class="line">  return res</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    &apos;&apos;&apos;使用时更改bookid和将你的cooike更换成你的&apos;&apos;&apos;</span><br><span class="line">    &apos;&apos;&apos;https://lib-nuanxin.wqxuetang.com/v1/read/k?bid=3187886&apos;&apos;&apos;</span><br><span class="line">    &apos;&apos;&apos;cooike用上面的url然后进去f12调试复制里面的cooike&apos;&apos;&apos;</span><br><span class="line">    bookid =3187886</span><br><span class="line">    cooike = &apos;_gid=377254409517; _gidv=6699d59c633414a0287f63aa61c56d4e; PHPSESSID=ngeq25ktm1cp2ipd54kabr2eii; Hm_lvt_a84b27ffd87daa3273555205ef60df89=1580866455,1580876574,1580883745,1580883761; Hm_lpvt_a84b27ffd87daa3273555205ef60df89=1580883767; acw_tc=3ccdc15315808917923211688e5e6c7e01cc28622fbf0190a83bc6ce183541&apos;</span><br><span class="line">    try:</span><br><span class="line">      page = bookinfo(bookid,cooike)[1]</span><br><span class="line">      print(page)</span><br><span class="line">      if not os.path.exists(str(bookid)):</span><br><span class="line">        os.mkdir(str(bookid))</span><br><span class="line">      for i in range(1,int(page)):</span><br><span class="line">        if not os.path.exists(str(bookid)+&apos;/&apos;+str(i+1000)+&apos;.jpg&apos;):</span><br><span class="line">          try:</span><br><span class="line">             print(i)</span><br><span class="line">             gen_jwt_token(bookid,i,cooike)</span><br><span class="line">             fetch_png(bookid,i)</span><br><span class="line">             time.sleep(6) </span><br><span class="line">          except Exception as e:</span><br><span class="line">            print(e)</span><br><span class="line">    except Exception as e:</span><br><span class="line">       print(e)</span><br></pre></td></tr></table></figure><p>若大量遇到下面这种情况：<br><img src="http://q4uie93wz.bkt.clouddn.com/wenquanketang-spider/20200205054853614.png" alt=""><br>空列表，则说明你的cooike可能过期及时更换就好</p><p>跑完一遍后打开你的图片保存路径，然后排序按大小，然后翻到最下面若和以下一样说明这几张没成功，删了 重新来一遍就好，重新跑，不会覆盖之前的，只会抓取没有成功的：<br><img src="http://q4uie93wz.bkt.clouddn.com/wenquanketang-spider/20200205055155346.png" alt=""></p><p>最后推荐一个好用的小工具，图片合成pdf工具：<br><a href="http://forspeed.onlinedown.net/down/FreePic2Pdf.zip" target="_blank" rel="noopener">pic2pdf</a></p><p><img src="http://q4uie93wz.bkt.clouddn.com/wenquanketang-spider/20200205055344173.png" alt=""></p><p>拥有这些，就可以成功的得到了自己的电子书。。今天就到这儿吧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天打开发现文泉课堂需要登陆才能进行访问，一登陆，发现，昨天的502，明显好多了今天附上所有源码，供大家学习和参考&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
      <category term="教程" scheme="http://www.windknows.com/blog/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="python" scheme="http://www.windknows.com/blog/tags/python/"/>
    
      <category term="爬虫" scheme="http://www.windknows.com/blog/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>文泉课堂知识库图书爬虫</title>
    <link href="http://www.windknows.com/spider-wenquanketang/"/>
    <id>http://www.windknows.com/spider-wenquanketang/</id>
    <published>2020-02-04T05:38:17.000Z</published>
    <updated>2020-02-04T09:22:19.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>昨天导员老师发了个通知，说在疫情期间，清华大学的文泉课堂资源免费开放，那何不用爬虫技术，将所有的的电子书下载下来，于是就有了这篇文章</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先确定一下爬取的思路，浏览了一下发现并没有直接下载的链接，只能免费的阅读里面的书，打开阅读界面，书是以图片的形式呈现的，于是我们的爬虫思路是按顺序爬取所有的图片，最后合成一个pdf文件，这样我们就成功的获取到了这本书的pdf版</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>我们打开浏览器，随便打开一本书，然后打开调试，发现网页源码并不能直接获得，是通过动态加载的，所以只能考虑图片地址的规律</p><p><img src="C:\Users\lyh\AppData\Roaming\Typora\typora-user-images\1580799748700.png" alt="1580799748700"></p><p>我们会发现，图片的url是页数，后面是一串字符串，这时经百度发现这是<a href="https://baijiahao.baidu.com/s?id=1608021814182894637&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">jwt</a></p><p>可以理解成是web验证身份的一种方式吧，我也是第一次接触，在网上看了很多相关的文章，在这里推荐几篇</p><p><a href="https://blog.csdn.net/weixin_42030357/article/details/95629924" target="_blank" rel="noopener">利用JWT生成Token的原理及公钥和私钥加密和解密的原则</a></p><p><a href="http://blog.leapoahead.com/2015/09/06/understanding-jwt/" target="_blank" rel="noopener">JSON Web Token - 在Web应用间安全地传递信息</a></p><p><a href="https://baijiahao.baidu.com/s?id=1608021814182894637&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">10分钟了解JSON Web令牌（JWT）</a></p><p><a href="https://blog.csdn.net/lizhiqiang1217/article/details/90523209" target="_blank" rel="noopener">Jwt简介</a></p><p>简单地说JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ.SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc</span><br></pre></td></tr></table></figure><p>jwt由三部分构成分别如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Header（头部）</span><br><span class="line">Payload（负载）</span><br><span class="line">Signature（签名）</span><br></pre></td></tr></table></figure><p>我百度了一下有个<a href="http://jwt.calebb.net/" target="_blank" rel="noopener">jwt</a>的在线解密的网站，进去后随便复制一个图片的token如图：</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200203120623653/20200204034646697.png" alt=""></p><h2 id="里面的数据："><a href="#里面的数据：" class="headerlink" title="里面的数据："></a>里面的数据：</h2><ol><li><p>alg属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成HS256）；typ属性表示这个令牌（token）的类型（type），JWT 令牌统一写为JWT。</p></li><li><p>中间的dict是Payload，可以理解成我们要给服务器的数据，其中p代表页数，t是时间戳，b是书的id就是bid，k值我看了半天没看懂，后来在网页中我发现了个请求如下图：</p><p>​       <img src="http://q4uie93wz.bkt.clouddn.com/20200203120623653/20200204040745561.png" alt="k值"></p></li></ol><pre><code>刚好和上面的k值里的u，i，t，b，n对上，所以我就肯定没错了，是 这个  了，然后所有的东西确定了之后，我们就开始构建吧,然后在Headers里找到相关信息，并进行获取就行</code></pre><ol start="3"><li>最下面的是Signature 部分是对前两部分的签名，防止数据篡改。</li></ol><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。</p><p>代码如下图示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_jwt_token</span><span class="params">(bookid, page)</span>:</span></span><br><span class="line">  <span class="string">''' get jwt token '''</span></span><br><span class="line">  cur_time = time.time()  //时间戳</span><br><span class="line">  jwtkey = gen_jwt_key(bookid)  //token里的k值</span><br><span class="line">  jwttoken = jwt.encode(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"p"</span>: page,</span><br><span class="line">      <span class="string">"t"</span>: int(cur_time) * <span class="number">1000</span>,</span><br><span class="line">      <span class="string">"b"</span>: str(bookid),</span><br><span class="line">      <span class="string">"w"</span>: <span class="number">1000</span>,</span><br><span class="line">      <span class="comment"># "k": json.dumps(self.jwtkey),</span></span><br><span class="line">      <span class="string">"k"</span>: json.dumps(jwtkey),</span><br><span class="line">      <span class="string">"iat"</span>: int(cur_time),</span><br><span class="line">    &#125;,  //进行编码</span><br><span class="line">    JWT_SECRET,</span><br><span class="line">    algorithm=<span class="string">'HS256'</span>,</span><br><span class="line">  ).decode(<span class="string">'ascii'</span>)</span><br><span class="line">  <span class="keyword">return</span> jwttoken</span><br></pre></td></tr></table></figure><p>k值获取代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_jwt_key</span><span class="params">(bookid)</span>:</span></span><br><span class="line">  URL =<span class="string">'https://lib-nuanxin.wqxuetang.com'</span></span><br><span class="line">  url = <span class="string">f'<span class="subst">&#123;URL&#125;</span>/v1/read/k?bid=<span class="subst">&#123;bookid&#125;</span>'</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    resp = requests.get(url,headers = headers)</span><br><span class="line">    resp.raise_for_status()</span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">    print(exc)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    jdata = resp.json()</span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">    jdata = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  res = jdata.get(<span class="string">'data'</span>)</span><br><span class="line">  <span class="keyword">if</span> res <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'returned None, something is not right...'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>有了这些我们就可以来轻松的获取图片了</p><p>我们可以发现图片的url规律是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URL = <span class="string">'https://lib-nuanxin.wqxuetang.com'</span></span><br><span class="line"><span class="string">f'<span class="subst">&#123;URL&#125;</span>/page/img/<span class="subst">&#123;bookid&#125;</span>/<span class="subst">&#123;page&#125;</span>?k=<span class="subst">&#123;token&#125;</span>'</span></span><br></pre></td></tr></table></figure><p>然后就可以来获取图片了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_png</span><span class="params">(bookid, page)</span>:</span></span><br><span class="line">  <span class="string">''' download book page img '''</span></span><br><span class="line">  token = gen_jwt_token(bookid, page)</span><br><span class="line">  print(token)</span><br><span class="line">  url = <span class="string">f'<span class="subst">&#123;URL&#125;</span>/page/img/<span class="subst">&#123;bookid&#125;</span>/<span class="subst">&#123;page&#125;</span>?k=<span class="subst">&#123;token&#125;</span>'</span></span><br><span class="line">  print(url)</span><br><span class="line">  headers = &#123;</span><br><span class="line">    <span class="string">'accept'</span>: <span class="string">'image / webp, image / *, * / *;q = 0.8'</span>,</span><br><span class="line">    <span class="string">'referer'</span>: <span class="string">f'<span class="subst">&#123;URL&#125;</span>/read/pdf/<span class="subst">&#123;bookid&#125;</span>'</span>,</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64)    AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  req = requests.get(url,headers=headers)</span><br><span class="line">  res = req.content</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(str(bookid)):</span><br><span class="line">    os.mkdir(str(bookid))</span><br><span class="line">  <span class="keyword">with</span> open(str(bookid)+<span class="string">'/'</span>+str(page)+<span class="string">'.jpg'</span>,<span class="string">'wb'</span>)<span class="keyword">as</span> f:</span><br><span class="line">      f.write(res)</span><br></pre></td></tr></table></figure><p>当我们获取到书的所有图片如图：</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200203120623653/20200204042704956.png" alt=""></p><p>然后我们再用python将这些图片合成一个完整的pdf</p><p>具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># Author:windknew</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> reportlab.lib.units <span class="keyword">import</span> mm, inch</span><br><span class="line"><span class="keyword">from</span> reportlab.lib.pagesizes <span class="keyword">import</span> A4,A5, landscape</span><br><span class="line"><span class="keyword">from</span> reportlab.pdfgen <span class="keyword">import</span> canvas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片文件名称列表</span></span><br><span class="line">IMAGEFILES = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertpdf</span><span class="params">(pdfFile)</span>:</span></span><br><span class="line">  <span class="string">'''多个图片合成一个pdf文件'''</span></span><br><span class="line">  (w, h) = landscape(A5) <span class="comment">#</span></span><br><span class="line">  cv = canvas.Canvas(pdfFile,pagesize=landscape(A5))</span><br><span class="line">  <span class="keyword">for</span> imagePath <span class="keyword">in</span> IMAGEFILES:</span><br><span class="line">     print(imagePath)</span><br><span class="line">     cv.drawImage(imagePath, <span class="number">0</span>, <span class="number">0</span>, w, h)</span><br><span class="line">     cv.showPage()</span><br><span class="line">  cv.save()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getListImages</span><span class="params">(dirPath)</span>:</span></span><br><span class="line">  <span class="string">'''读取指定文件夹下所有的JPEG图片，存入列表'''</span></span><br><span class="line">  <span class="keyword">if</span> dirPath <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> len(dirPath) == <span class="number">0</span>:</span><br><span class="line">     <span class="keyword">raise</span> ValueError(<span class="string">'dirPath不能为空，该值为存放图片的具体路径文件夹！'</span>)</span><br><span class="line">  <span class="keyword">if</span> os.path.isfile(dirPath):</span><br><span class="line">     <span class="keyword">raise</span> ValueError(<span class="string">'dirPath不能为具体文件，该值为存放图片的具体路径文件夹！'</span>)</span><br><span class="line">  <span class="keyword">if</span> os.path.isdir(dirPath):</span><br><span class="line">     <span class="keyword">for</span> imageName <span class="keyword">in</span> os.listdir(dirPath):</span><br><span class="line">        <span class="keyword">if</span> imageName.endswith(<span class="string">'.jpg'</span>) <span class="keyword">or</span>   imageName.endswith(<span class="string">'.jpeg'</span>):</span><br><span class="line">           absPath =converPath(dirPath) + imageName</span><br><span class="line">           IMAGEFILES.append(absPath)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">converPath</span><span class="params">(dirPath)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> dirPath <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> len(dirPath) == <span class="number">0</span>:</span><br><span class="line">     <span class="keyword">raise</span> ValueError(<span class="string">'dirPath不能为空！'</span>)</span><br><span class="line">  <span class="keyword">if</span> os.path.isfile(dirPath):</span><br><span class="line">     <span class="keyword">raise</span> ValueError(<span class="string">'dirPath不能为具体文件，该值为文件夹路径！'</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> str(dirPath).endswith(<span class="string">"\\"</span>):</span><br><span class="line">     <span class="keyword">return</span> dirPath + <span class="string">"\\"</span></span><br><span class="line">  <span class="keyword">return</span> dirPath</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    getListImages(<span class="string">'C:/Users/lyh/Desktop/ershoushu/2175744/'</span>)</span><br><span class="line">    pdfFile = converPath(<span class="string">'C:/Users/lyh/Desktop/ershoushu/2175744/'</span>)+<span class="string">'2175744'</span>+ <span class="string">".pdf"</span></span><br><span class="line">    convertpdf(pdfFile)</span><br></pre></td></tr></table></figure><h1 id="结语总结"><a href="#结语总结" class="headerlink" title="结语总结"></a>结语总结</h1><p>   这样我们就成功的获取到了一本想要的pdf，但是文泉课堂不知什么原因有时候就会502，这样的话我们就需要多爬几次，直到把整本书的img都抓到，这次分享就到这儿了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;昨天导员老师发了个通知，说在疫情期间，清华大学的文泉课堂资源免费开放，那何不用爬虫技术，将所有的的电子书下载下来，于是就有了这篇文章&lt;/p&gt;
      
    
    </summary>
    
      <category term="python" scheme="http://www.windknows.com/blog/categories/python/"/>
    
    
      <category term="爬虫，python" scheme="http://www.windknows.com/blog/tags/%E7%88%AC%E8%99%AB%EF%BC%8Cpython/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建博客（四）</title>
    <link href="http://www.windknows.com/hexo-3/"/>
    <id>http://www.windknows.com/hexo-3/</id>
    <published>2020-02-04T04:18:25.000Z</published>
    <updated>2020-02-03T07:36:26.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>承接上篇博客，上篇博客中我们在Github上部署成功，但Github上的访问速度在国内较慢，而且免费提供的资源有限，不适于长时期的博客运作，所以在此篇文章中，来说一下，我部署在云服务器的过程以及遇到的问题</p><p>首先我们了解一下，hexo利用git更新的流程，部署在Github上和部署在云服务器上没有特别大的本质区别</p><p>整个流程就是本地将markdown文件渲染成静态文件，然后Git推送到服务器的r代码仓库，让服务器通过钩子（hook）同步网站根目录，再利用nginx托管这些静态资源，就可以实现访问</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><h2 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h2><p>Windows10,在本地已经装好了Git，nodejs，hexo，并且在本地已经成功的能调试出来hexo</p><h2 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h2><p>华为的ECS（centos7）</p><p>已装好了git，nodejs，以及编译好了nginx（编译这玩意儿有些慢，我编译的时候大概花了将近30分钟）</p><h1 id="本地机器配置"><a href="#本地机器配置" class="headerlink" title="本地机器配置"></a>本地机器配置</h1><h2 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h2><p>在终端使用git bash生成公匙，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>然后一路回车，</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200130111102078/20200130111145685.png" alt=""></p><p>就会在如图示的文件路径下生成一个密钥文件id_rsa.pub</p><p>这个密钥文件我们后面会用到，这个密钥相当于我们访问服务器的钥匙</p><h1 id="云服务器配置"><a href="#云服务器配置" class="headerlink" title="云服务器配置"></a>云服务器配置</h1><h2 id="Git，nodejs，Nginx等安装"><a href="#Git，nodejs，Nginx等安装" class="headerlink" title="Git，nodejs，Nginx等安装"></a>Git，nodejs，Nginx等安装</h2><p>具体安装过程可自行百度</p><h2 id="创建git新用户以及进行配置"><a href="#创建git新用户以及进行配置" class="headerlink" title="创建git新用户以及进行配置"></a>创建git新用户以及进行配置</h2><h3 id="创建git新用户"><a href="#创建git新用户" class="headerlink" title="创建git新用户"></a>创建git新用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adduser git #加入git用户</span><br><span class="line">passwd git #配置你的密码</span><br><span class="line">chmod 740 /etc/sudoers/ #修改git的sudo使用权限为只读</span><br><span class="line">vim /etc/sudoers #编辑sudoers</span><br></pre></td></tr></table></figure><p>打开sudoers，找到以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span># Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><p>在他的下面加入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ALL=(ALL)   ALL</span><br></pre></td></tr></table></figure><p>然后wq保存，并且将权限修改回来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure><h3 id="将公钥配置到服务器上"><a href="#将公钥配置到服务器上" class="headerlink" title="将公钥配置到服务器上"></a>将公钥配置到服务器上</h3><p>就是刚才我们生成的那个文件<br><img src="http://q4uie93wz.bkt.clouddn.com/20200130111102078/20200130111224785.png" alt=""><br>将该文件内容复制，在云服务器端，切换至刚建好的git用户下，创建<strong>.ssh</strong>文件和和<strong>authorized_keys</strong>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>然后修改权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">chmod 600 .ssh/authorzied_keys # 将文件设置为可读可写</span><br><span class="line">chmod 700 .ssh #将该文件夹设置为可读可写可执行（访问）</span><br></pre></td></tr></table></figure><h3 id="测试git链接"><a href="#测试git链接" class="headerlink" title="测试git链接"></a><strong>测试git链接</strong></h3><p>切换到本地机器在本地机器上测试是否能连接到你的远程Git用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@SERVER_IP</span><br></pre></td></tr></table></figure><p>测试成功会出现如下：<br><img src="http://q4uie93wz.bkt.clouddn.com/20200130111102078/20200130111952913.png" alt=""><br>如果测试不成功，看看具体的输出信息，通常是公钥没配置好的原因，不用担心，把原来生成的公钥删了，try again  就欧克了</p><h3 id="创建网站根目录"><a href="#创建网站根目录" class="headerlink" title="创建网站根目录"></a><strong>创建网站根目录</strong></h3><p>创建网站的根目录目的是为了让nginx进行托管hexo 生成的静态文件</p><p>创建一个目录用于作为网站的根目录，切换到root用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">mkdir /home/hexo    # 此目录为网站的根目录</span><br></pre></td></tr></table></figure><p>然后变更该目录的所有者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown git:git -R /home/hexo</span><br></pre></td></tr></table></figure><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a><strong>配置nginx</strong></h3><p>安装过程自行度娘就好，编译好nginx后进入nginx的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim conf/nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen       8081;           #监听8081端口</span><br><span class="line">        server_name 139.159.245.212; #你的服务器名，通常是域名，如果是域名，你就需要监听80端口</span><br><span class="line">        root       /home/hexo;       #网站的根目录,根据自己所建自行修改</span><br><span class="line">        location / &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">   #access_log logs/access.log mylog;</span><br><span class="line"></span><br><span class="line">   error_page 404 /404.html;         #配置40x页面</span><br><span class="line">       location = /40x.html &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   error_page 500 502 503 504 /50x.html; #配置50x页面</span><br><span class="line">       location = /50x.html &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>注意使用 <code>nginx -t</code> 命令检查配置文件的语法是否出错。然后使用 <code>systemctl restart nginx.service</code> 或者</p><p>在编译好的nginx目录下使用<code>sbin/nginx -s reload</code>命令重启服务即可</p><h2 id="实现自动化部署"><a href="#实现自动化部署" class="headerlink" title="实现自动化部署"></a>实现自动化部署</h2><h3 id="建立git裸库（就是空的）"><a href="#建立git裸库（就是空的）" class="headerlink" title="建立git裸库（就是空的）"></a><strong>建立git裸库（就是空的）</strong></h3><p>在root用户下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">cd /home/git   # 在 git 用户目录下创建</span><br><span class="line">git init --bare blog.git</span><br></pre></td></tr></table></figure><p>这时，<code>git</code> 用户的 <code>~</code> 目录下就存在一个 <code>blog.git</code> 文件夹，可使用 <code>ls</code> 命令查看。再修改<code>blog.git</code> 的所有者</p><h3 id="使用钩子同步网站根目录"><a href="#使用钩子同步网站根目录" class="headerlink" title="使用钩子同步网站根目录"></a><strong>使用钩子同步网站根目录</strong></h3><p>在这使用的是 <code>post-receive</code> 这个钩子，当 <code>git</code> 有收发的时候就会调用这个钩子。 在 <code>blog.git</code>裸库的 hooks 文件夹中，新建 <code>post-receive</code> 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>填入以下内容，其中 <code>/home/hexo</code> 为网站目录，根据自己的填入,保存退出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f</span><br></pre></td></tr></table></figure><p>该钩子的意思是当本地有提交到服务器时，会将文件放在/home/hexo下</p><p><code>-f</code>这个参数如果在多人协作的博客中可能会引发不好的结果，因为他是强制更新的意思，会将本地版本覆盖掉远程服务器的版本，但是是个人的博客系统就无所谓了</p><p>保存后，要赋予这个文件可执行权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /home/git/blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h2 id="本地机器中部署至服务器"><a href="#本地机器中部署至服务器" class="headerlink" title="本地机器中部署至服务器"></a>本地机器中部署至服务器</h2><p>在本地中，和部署到 <code>github</code> 服务一样，需要先 <code>hexo g</code> 命令生成静态文件，通过 <code>hexo s</code> 命令能够正常进行本地访问，并且确保<strong><em>已经安装</em></strong>了 <code>hexo-deployer-git</code>。</p><h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a><strong>配置Hexo</strong></h3><p>hexo 根目录下的 <code>_config.yml</code> 文件，找到 <code>deploy</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: git@SERVER:/home/git/blog.git     # 填写你的服务器地址 将SERVER替换掉</span><br><span class="line">    branch: master      # 分支</span><br></pre></td></tr></table></figure><p>之后按照正常的流程部署，也可以在hexo项目中添加脚本scripts,脚本内容如下图所示（在package.json文件中添加）</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200130111102078/20200130114431386.png" alt=""></p><h2 id="测试自动化部署"><a href="#测试自动化部署" class="headerlink" title="测试自动化部署"></a>测试自动化部署</h2><p><img src="http://q4uie93wz.bkt.clouddn.com/20200130111102078/20200130114351552.png" alt=""><br>然后用hexo d 即可推送到远端服务器 然后可以用自己服务器ip访问自己的博客网站了</p><p>本次分享就到这儿，有任何问题欢迎留言，我会在第一时间，进行回复！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;承接上篇博客，上篇博客中我们在Github上部署成功，但Github上的访问速度在国内较慢，而且免费提供的资源有限，不适于长时期的博客运作，
      
    
    </summary>
    
      <category term="教程" scheme="http://www.windknows.com/blog/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo,blog" scheme="http://www.windknows.com/blog/tags/hexo-blog/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建博客（三）</title>
    <link href="http://www.windknows.com/hexo-2/"/>
    <id>http://www.windknows.com/hexo-2/</id>
    <published>2020-02-03T05:40:59.000Z</published>
    <updated>2020-02-03T07:23:43.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="部署发行项目"><a href="#部署发行项目" class="headerlink" title="部署发行项目"></a>部署发行项目</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章是基于你已经注册了github账号和创建了对应的仓库，通过配置ssh来建立连接</p><h2 id="创建Repository"><a href="#创建Repository" class="headerlink" title="创建Repository"></a>创建Repository</h2><p>创建一个Repository，名称规则为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username.github.name</span><br></pre></td></tr></table></figure><p>然后编辑hexo的配置文件_config.yml,修改如图示地方。repo修改你的仓库地方</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200203120623653/20200203031453107.png" alt=""></p><h2 id="生成ssh"><a href="#生成ssh" class="headerlink" title="生成ssh"></a>生成ssh</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车&gt;</span><br></pre></td></tr></table></figure><p>然后一路回车</p><h4 id="赋值id-rsa-pub文件内容，在github的settings中，点选SSH-keys，添加一个key，将内容粘贴进去"><a href="#赋值id-rsa-pub文件内容，在github的settings中，点选SSH-keys，添加一个key，将内容粘贴进去" class="headerlink" title=".赋值id_rsa.pub文件内容，在github的settings中，点选SSH keys，添加一个key，将内容粘贴进去"></a>.赋值id_rsa.pub文件内容，在github的settings中，点选SSH keys，添加一个key，将内容粘贴进去</h4><p><img src="C:\Users\lyh\AppData\Roaming\Typora\typora-user-images\1580714396039.png" alt="1580714396039"></p><h4 id="测试是否添加成功"><a href="#测试是否添加成功" class="headerlink" title="测试是否添加成功"></a>测试是否添加成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h2 id="部署到github上"><a href="#部署到github上" class="headerlink" title="部署到github上"></a>部署到github上</h2><p>在hexo中分别进行生成，上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="部署成功后，可通过-http-pangyuanni-github-io-进行访问，其中将pangyuanni替换为你自己的username即可"><a href="#部署成功后，可通过-http-pangyuanni-github-io-进行访问，其中将pangyuanni替换为你自己的username即可" class="headerlink" title="部署成功后，可通过 http://pangyuanni.github.io 进行访问，其中将pangyuanni替换为你自己的username即可"></a>部署成功后，可通过 <a href="http://pangyuanni.github.io/" target="_blank" rel="noopener">http://pangyuanni.github.io</a> 进行访问，其中将pangyuanni替换为你自己的username即可</h2><p><img src="http://q4uie93wz.bkt.clouddn.com/20200203120623653/20200203032221032.png" alt=""></p><p>此次分享到这儿 下篇博客分享如何部署到自己的与服务器上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;部署发行项目&quot;&gt;&lt;a href=&quot;#部署发行项目&quot; class=&quot;headerlink&quot; title=&quot;部署发行项目&quot;&gt;&lt;/a&gt;部署发行项目&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="教程" scheme="http://www.windknows.com/blog/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo,blog" scheme="http://www.windknows.com/blog/tags/hexo-blog/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建博客（二）</title>
    <link href="http://www.windknows.com/hexo-1/"/>
    <id>http://www.windknows.com/hexo-1/</id>
    <published>2020-02-02T02:34:30.000Z</published>
    <updated>2020-02-03T07:37:12.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   承接上篇博客，上篇博客中我们已经能够在本地成功运行我们的hexo博客，这篇文章我们来说说hexo的主题等个性化操作</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>  Hexo官网有很多很多主题供我们选择，我们可以在这些主题的基础之下进行修改，或者加入我们个性化的元素，hexo的官网网址是<a href="https://hexo.io/zh-cn/，" target="_blank" rel="noopener">https://hexo.io/zh-cn/，</a><br>  <img src="http://q4uie93wz.bkt.clouddn.com/20200203120623653/20200203120627780.png" alt=""><br>  打开之后是这样，打开之后就是对hexo优点的介绍，然后我们选择主题然后打开就可以看到很多很多主题，由于hexo的服务器在国外加载可能较慢，耐心等待就好。</p><p>  <img src="http://q4uie93wz.bkt.clouddn.com/20200203120623653/20200203120721133.png" alt=""></p><p>然后每个主题对应的名字就是主题的github地址，在我们hexo项目文件中找到theme进入之后，使用git clone 加主题的github地址，就可以把相应的主题文件克隆到我们的本地，我用我使用的material-x 这个主题为例，地址是<a href="https://github.com/xaoxuu/hexo-theme-material-x.git" target="_blank" rel="noopener">https://github.com/xaoxuu/hexo-theme-material-x.git</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xaoxuu/hexo-theme-material-x.git</span><br></pre></td></tr></table></figure><p><img src="http://q4uie93wz.bkt.clouddn.com/20200203120623653/20200203121716821.png" alt=""></p><p>这样就能将主题文件克隆到本地，如图示，当然也可以在浏览器里下载然后，解压到你的themes文件夹下</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200203120623653/20200203121822897.png" alt=""></p><p>克隆完看看  看看使用说明，有没有相关的依赖包需要下载，若有按照说明进行下载，如 material-x</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200203120623653/20200203011121694.png" alt=""></p><p>npm i -S hexo-generator-search hexo-generator-json-content hexo-renderer-less</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200203120623653/20200203011259181.png" alt=""></p><h2 id="Hexo网站配置文件"><a href="#Hexo网站配置文件" class="headerlink" title="Hexo网站配置文件"></a>Hexo网站配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在根目录下的_config.yml主要是对网站的总属性进行设置</span><br><span class="line">如：网站标题，网站logo,网站插件使用等全局的属性</span><br><span class="line">主题目录下的_config.yml主要是针对网站的布局，导航等特性设置进行设</span><br></pre></td></tr></table></figure><h2 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h2><p>打开站点配置文件（根目录下的_config.yml）找到theme，将其值改为你下载的主题的名字，如下</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200203120623653/20200203125512343.png" alt=""></p><p><strong>PS</strong> :注意theme的冒号后面有个空格，不然会报错</p><p>然后再次启动我们的hexo，打开localshost:4000就可以看到主题效果</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200203120623653/20200203011347920.png" alt=""></p><p>这样我们就更换了一个主题</p><p>关于网站的配置我们都可在网站的配置文件下更改：</p><p>刚更换完主题后，配置文件是这样的：</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200203120623653/20200203012031216.png" alt=""></p><p>自己配置完是这样的</p><p><img src="http://q4uie93wz.bkt.clouddn.com/20200203120623653/20200203011744303.png" alt=""></p><p>title是网站的标题</p><p>avatar 是网站的图标，</p><p>logo是网站的logo，</p><p>subtitle 是网站副标题</p><p>description 是网站描述</p><p>author 是作者</p><p>timezone 是时区</p><p>language 是语言</p><p>其他配置暂时可忽略</p><p>然后对于其他关于主题的设置可以到themes文件夹下里的主题文件里的_config.yml里面进行相关配置，比如评论系统，字数统计，背景图，等等相关配置都在里面进行配置，在配置文件里都有相关说明。</p><p>此次分享就到这儿，下篇博客我们分享如何部署项目</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;   承接上篇博客，上篇博客中我们已经能够在本地成功运行我们的hexo博客，这篇文章我们来说说hexo的主题等个性化操作&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
      <category term="教程" scheme="http://www.windknows.com/blog/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo，blog" scheme="http://www.windknows.com/blog/tags/hexo%EF%BC%8Cblog/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo 搭建博客(一)</title>
    <link href="http://www.windknows.com/hexo/"/>
    <id>http://www.windknows.com/hexo/</id>
    <published>2020-01-30T04:09:29.000Z</published>
    <updated>2020-02-03T07:27:40.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Hexo搭建博客（一）"><a href="#使用Hexo搭建博客（一）" class="headerlink" title="使用Hexo搭建博客（一）"></a>使用Hexo搭建博客（一）</h1><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><p>   本来刚开始想用python的django框架进行个人博客的搭建，但是使用python框架进行搭建的话， 但是进行到一半就不想干了，因为代码量太复杂，太繁琐，后来在网上发现了hexo这个专业的博客框架，搭建起来比较django省时省力，就决定用Hexo来搭建，在本地搭建没什么问题，但部署在云服务器的过程异常艰难。但最终，在神器——百度 的帮助下，问题全部解决</p><h2 id="Hexo-说明"><a href="#Hexo-说明" class="headerlink" title="Hexo 说明"></a>Hexo 说明</h2><p>Hexo是基于nodeJS环境的静态博客，简单来说就是轻量，简易，高逼格的博客工具，hexo是将markdown文件生成静态的html然后将生成的html上传到我们的服务器，简而言之：hexo是个静态页面生成，上传的工具</p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>先安利一个在windows下非常好用的命令行工具<a href="https://cmder.net/" target="_blank" rel="noopener">cmder</a>,关于他的好用之处，在另一篇博客有详细说明</p><ol><li><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> 下载后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 <code>Add to PATH</code> ,这样你就不用自己去配置电脑上环境变量了</p></li><li><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> 下载安装，下载后一路next就好</p></li><li><p>用npm安装Hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli  // npm是安装Nodejs一起安装的包管理工具</span><br></pre></td></tr></table></figure></li></ol><p>这样我们的hexo在本地就差不多完成了，然后我们新建一个空的文件夹，进去初始化博客（这里我新建一个blog的文件夹）然后输入下列命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init # hexo会在目标文件夹简历网站所需要的所有文件</span><br><span class="line">npm install # 安装依赖包</span><br></pre></td></tr></table></figure><p>也可以使用 hexo init  <folder>，其中 <folder>为保存Hexo的项目路径，然后就等待clone，就会把各种配置文件下载到你的文件夹中了，</folder></folder></p><p><img src="http://q4uie93wz.bkt.clouddn.com/django/20200129052843085.png" alt=""></p><h3 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g #等同于hexo generate,胜场静态文件到public文件夹</span><br><span class="line">hexo s # 等同于hexo server,在本地服务器运行</span><br></pre></td></tr></table></figure><p>还有一个命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #作为清除静态文件夹的内容并删掉，主要用于更改变更了某些地方导致页面显示不完善</span><br></pre></td></tr></table></figure><p><img src="http://q4uie93wz.bkt.clouddn.com/django/20200129052936282.png" alt=""></p><p>之后就可以打开浏览器并输入ip地址<a href="http://localhost:4000/查看，效果如下" target="_blank" rel="noopener">http://localhost:4000/查看，效果如下</a></p><p><img src="http://q4uie93wz.bkt.clouddn.com/django/20200129053008515.png" alt=""></p><h3 id="新建页面和文章"><a href="#新建页面和文章" class="headerlink" title="新建页面和文章"></a>新建页面和文章</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new 'title' #生成新文章，路径在:\source\_post\title.md</span><br><span class="line">hexo new page 'title' #生成新页面,可在主题配置文件中配置页面</span><br></pre></td></tr></table></figure><p>生成文章或页面的模板放在博客文件夹根目录下的 scaffolds/ 文件夹里面，文章对应的是 post.md ，页面对应的是page.md，草稿的是draft.md</p><h3 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Start My Blog Trip — Power By Hexo  # 文章页面上的显示名称，可以任意修改，不会出现在URL中</span><br><span class="line">date: 2017-2-10 23:49:28  # 文章生成时间，一般不改</span><br><span class="line">categories: diary  # 文章分类目录，多个分类使用[a,b,c]这种格式</span><br><span class="line">tags: [Hexo,diary]  # 文章标签</span><br><span class="line">---</span><br><span class="line"><span class="meta">#</span>这里开始使用markdown格式输入你的正文。</span><br><span class="line">&lt;!--more--&gt; </span><br><span class="line"><span class="meta">#</span>more标签以下的内容要点击“阅读全文”才能看见，#more标签以上的内容为你首页显示文章的摘要部分</span><br></pre></td></tr></table></figure><h3 id="Markdown文章编辑"><a href="#Markdown文章编辑" class="headerlink" title="Markdown文章编辑"></a>Markdown文章编辑</h3><p>如果不熟悉MD语法，可以去百度，B站找教学，不难，常用的语法就那么几个</p><p>再给大家安利个md文章神器<a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>,还有hexo文章神器<a href="http://pdidc.jb51.net:81/201903/tools/HexoEdit32_jb51.rar" target="_blank" rel="noopener">HexoEditor</a></p><h3 id="常用命令总结"><a href="#常用命令总结" class="headerlink" title="常用命令总结"></a>常用命令总结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder] # 初始化一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站</span><br><span class="line">hexo new [layout] &lt;title&gt; # 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来</span><br><span class="line">hexo version # 查看版本</span><br><span class="line">hexo clean # 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line">hexo g # 等于hexo generate # 生成静态文件</span><br><span class="line">hexo s # 等于hexo server # 本地预览</span><br><span class="line">hexo d # 等于hexo deploy # 部署，可与hexo g合并为 hexo d -g</span><br></pre></td></tr></table></figure><p>本篇文章先到这儿，下篇文章给大家分享分享打造个性化的hexo-blog</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用Hexo搭建博客（一）&quot;&gt;&lt;a href=&quot;#使用Hexo搭建博客（一）&quot; class=&quot;headerlink&quot; title=&quot;使用Hexo搭建博客（一）&quot;&gt;&lt;/a&gt;使用Hexo搭建博客（一）&lt;/h1&gt;&lt;h2 id=&quot;引言：&quot;&gt;&lt;a href=&quot;#引言：&quot; c
      
    
    </summary>
    
      <category term="教程" scheme="http://www.windknows.com/blog/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo,blog" scheme="http://www.windknows.com/blog/tags/hexo-blog/"/>
    
  </entry>
  
</feed>
